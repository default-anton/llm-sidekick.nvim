*llm-sidekick.txt*  Fast and hackable code companion for Neovim

==============================================================================
INTRODUCTION                                              *llm-sidekick*

llm-sidekick.nvim is a fast and hackable code companion for Neovim that stays
out of your way.

==============================================================================
INSTALLATION                                             *llm-sidekick-installation*

Using lazy.nvim:
>
    {
        'default-anton/llm-sidekick.nvim',
        dependencies = {
            'nvim-lua/plenary.nvim',
        },
        config = function()
            require('llm-sidekick').setup({
                smart_model = "claude-3-5-sonnet-latest",
                fast_model = "claude-3-5-haiku-latest",
                reasoning_model = "o1",
            })
        end,
    }
<

System Requirements:
1. curl (for API requests)
2. jq (for JSON parsing)
3. stdbuf (for real-time output buffering)

Installation examples for curl:

Ubuntu/Debian:
>
    sudo apt-get install curl jq coreutils
<

macOS:
>
    brew install curl jq coreutils
<

Arch Linux:
>
    sudo pacman -S curl jq coreutils
<

API Requirements                                         *llm-sidekick-api-requirements*

The following API keys are only required if you plan to use models from these
specific providers:

1. Anthropic API key (for Claude models):
   Set one of these environment variables:
   - LLM_SIDEKICK_ANTHROPIC_API_KEY
   - ANTHROPIC_API_KEY

2. OpenAI API key (for OpenAI models):
   Set one of these environment variables:
   - LLM_SIDEKICK_OPENAI_API_KEY
   - OPENAI_API_KEY

3. Gemini API key (for Gemini models):
   Set the following environment variable:
   - LLM_SIDEKICK_GEMINI_API_KEY
   - GEMINI_API_KEY

You only need to set up API keys for the providers whose models you intend to use.

Speech-to-Text Requirements                              *llm-sidekick-stt-requirements*

The following requirements are only needed if you plan to use the :Stt command
for Speech-to-Text functionality. They are optional for the core plugin.

1. System requirements:
   - sox: Command-line audio recording tool
   - Working audio input device
   - Groq API key (set as GROQ_API_KEY environment variable) for Whisper model

Installation examples for STT dependencies:

Ubuntu/Debian:
>
    sudo apt-get install sox
<

macOS:
>
    brew install sox
<

Arch Linux:
>
    sudo pacman -S sox
<

==============================================================================
CONFIGURATION                                            *llm-sidekick-config*

Configure the plugin by calling the setup function:
>
    require('llm-sidekick').setup({
        -- Model configuration
        smart_model = "claude-3-5-sonnet-latest",  -- Your go-to model
        fast_model = "claude-3-5-haiku-latest",    -- Model for quick responses
        reasoning_model = "o1",                    -- Model for complex reasoning
    })
<

==============================================================================
COMMANDS                                                 *llm-sidekick-commands*

                                                        *:Chat*
:Chat [args] [paths] Opens a new buffer for general conversation with the LLM.
                    Perfect for brainstorming, creative writing, or any
                    non-technical discussions. Arguments can be:
                    - Model type: smart (default), fast (quick responses),
                      reason (complex problems)
                    - Opening mode: tab (t), vsplit (v), split (s)
                    File content can be included by passing paths to files or
                    directories. Multiple file paths can be added. Example:
                    `:Chat %` to include the current file, `:Chat file1.txt
                    file2.lua` to include two specific files, or `:Chat %:h` to
                    include all files in the current directory recursively.

                                                        *:Ask*
:Ask [args] [paths]  Opens a new buffer to ask software engineering and
                    development-related questions. Uses a prompt optimized for
                    technical discussions and problem-solving. Accepts an
                    optional range to include the selected code. Arguments can be:
                    - Model type: smart (default), fast (quick responses),
                      reason (complex problems)
                    - Opening mode: tab (t), vsplit (v), split (s)
                    File content can be included by passing paths to files or
                    directories. Multiple file paths can be provided. Example:
                    `:Ask %` to include the current file, `:Ask utils.py
                    main.lua` to include two specific files, or `:Ask %:h` to
                    include all files in the current directory recursively.

                                                        *:Code*
:Code [args] [paths] Similar to :Ask but includes additional context for file
                    modifications. Accepts the same arguments as :Ask:
                    - Model type: smart (default), fast (quick responses),
                      reason (complex problems)
                    - Opening mode: tab (t), vsplit (v), split (s)
                    File content can be included by passing paths to files or
                    directories. Multiple file paths are supported. Example:
                    `:Code %` to include the current file, `:Code script.js
                    data.json` to include two specific files, or `:Code %:h` to
                    include all files in the current directory recursively.

                                                        *:Add*
:Add [file|url]     Adds content to the last Ask buffer. Can add content from:
                    - Current buffer (entire or selected range)
                    - Specified file path
                    - Directory path (recursively includes all files)
                    - URL to documentation or other web content
                    Must be used after an :Ask or :Code command.

                                                        *:Apply*
:Apply [all]        Applies file modifications from the LLM response. Only
                    available in buffers created by the :Code command.
                    Without arguments, applies changes from the modification
                    block at cursor position. With "all" argument, applies all
                    changes from the current assistant response.

                                                        *:Stt*
:Stt                Starts speech-to-text recording at the current cursor
                    position. Shows a floating window with recording status.
                    Press Enter to stop recording and insert the transcribed
                    text, or press q to cancel. Works in both normal and
                    insert modes.

==============================================================================
LICENSE                                                  *llm-sidekick-license*

Apache License, Version 2.0
Copyright (c) 2024 Anton Kuzmenko

 vim:tw=78:ts=8:ft=help:norl:

